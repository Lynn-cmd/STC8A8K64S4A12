C51 COMPILER V9.60.0.0   TFT                                                               06/02/2021 14:33:53 PAGE 1   


C51 COMPILER V9.60.0.0, COMPILATION OF MODULE TFT
OBJECT MODULE PLACED IN tft.OBJ
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE tft.C LARGE OPTIMIZE(8,SPEED) BROWSE INCDIR(.\SRC) DEBUG OBJECTEXTEND TA
                    -BS(2)

line level    source

   1          #include "stc8.h"
   2          #include "tft.h"
   3          #include "delay.h"
   4          #include "def.h"
   5          
   6          //TFT数据及命令函数
   7          // u8 VH,u8 VL  写入的数据 是16位 用两个8位表示  正好符合P0 P2口所对应
   8          void LCD_Writ_Bus(u8 VH,u8 VL)   //并行数据写入函数
   9          {
  10   1          LCD_DataPortH=VH; 
  11   1        LCD_DataPortL=VL;   
  12   1        LCD_WR=0;
  13   1        LCD_WR=1; 
  14   1      }
  15          
  16          //发送命令
  17          void Lcd_WR_Reg(u16 Data)  
  18          { 
  19   1          LCD_RS=0;
  20   1        LCD_Writ_Bus(Data>>8,Data);
  21   1      }
  22          
  23          //发送数据
  24          void Lcd_Write_Data(u16 Data) 
  25          {
  26   1          LCD_RS=1;
  27   1        LCD_Writ_Bus(Data>>8,Data);
  28   1      }
  29          
  30          
  31          
  32          ////写寄存器
  33          ////u16 com 要写入的命令 u16 val要写入的数据
  34          //void Lcd_WriteReg(u16 com,u16 val)       
  35          //{
  36          //  Lcd_WR_Reg(com);
  37          //    Lcd_Write_Data(val);
  38          //}
  39          
  40          //设置坐标范围    
  41          //x1 y1  初始位置
  42          //x2 y2  结束位置
  43          void Address_set(u16 x1,u16 y1,u16 x2,u16 y2)
  44          {      
  45   1            //  xq=0;yq=0;
  46   1          Lcd_WR_Reg(0X2A); 
  47   1          Lcd_Write_Data(x1>>8); 
  48   1          Lcd_Write_Data(x1&0XFF);
  49   1          Lcd_Write_Data(x2>>8); 
  50   1          Lcd_Write_Data(x2&0XFF);
  51   1      
  52   1          Lcd_WR_Reg(0X2B); 
  53   1          Lcd_Write_Data(y1>>8); 
  54   1          Lcd_Write_Data(y1&0XFF);
C51 COMPILER V9.60.0.0   TFT                                                               06/02/2021 14:33:53 PAGE 2   

  55   1          Lcd_Write_Data(y2>>8); 
  56   1          Lcd_Write_Data(y2&0XFF);
  57   1            Lcd_WR_Reg(0X2C);      //开始写入GRAM
  58   1       
  59   1      }
  60          
  61          
  62          //void LCD_SetCursor(u16 Xpos, u16 Ypos)
  63          //{  
  64          //        
  65          //    Lcd_WR_Reg(0X2A); 
  66          //    Lcd_Write_Data(Xpos>>8); 
  67          //    Lcd_Write_Data(Xpos&0XFF);   
  68          //    Lcd_WR_Reg(0X2B); 
  69          //    Lcd_Write_Data(Ypos>>8); 
  70          //    Lcd_Write_Data(Ypos&0XFF);
  71          //   
  72          //} 
  73          //
  74          //
  75          //void LCD_Clear(u16 color)
  76          //{
  77          //  u16 i,j;      
  78          //  LCD_SetCursor(0x0000,0x0000); //设置光标位置 
  79          //  Lcd_WR_Reg(0X2C);      //开始写入GRAM
  80          ////  LCD_RS=1;       
  81          //    for(i=0;i<320;i++)
  82          //   {
  83          //    for (j=0;j<240;j++)
  84          //      {
  85          ////          P2=color>>8;  
  86          ////          P0=color;   
  87          ////          LCD_WR=0;
  88          ////            LCD_WR=1;  
  89          //      Lcd_Write_Data(color);
  90          //      }
  91          //
  92          //    }   
  93          //
  94          //
  95          //} 
  96          
  97          
  98          ////画点
  99          ////x,y:坐标
 100          ////POINT_COLOR:此点的颜色
 101          //void LCD_DrawPoint(u16 x,u16 y,u16 color)
 102          //{
 103          //  LCD_SetCursor(x,y);   //设置光标位置 
 104          //  Lcd_WR_Reg(0X2C);      //开始写入GRAM
 105          //  Lcd_Write_Data(color);
 106          //}
 107          
 108          ////从ILI93xx读出的数据为BGR格式，而我们写入的时候为RGB格式。  （实验证明手册里并没有说明）
 109          ////通过该函数转换
 110          ////c:BGR格式的颜色值
 111          ////返回值：RGB格式的颜色值
 112          //u16 LCD_bgr2rgb(u16 c)
 113          //{
 114          //  u16  r,g,b,rgb;   
 115          //  b=(c>>0)&0x1f;
 116          //  g=(c>>5)&0x3f;
C51 COMPILER V9.60.0.0   TFT                                                               06/02/2021 14:33:53 PAGE 3   

 117          //  r=(c>>11)&0x1f;  
 118          //  rgb=(b<<11)+(g<<5)+(r<<0);     
 119          //  return(rgb);
 120          //} 
 121          
 122          
 123          //读取个某点的颜色值   
 124          //x,y:坐标
 125          //返回值:此点的颜色
 126          u16 LCD_readpoint(u16 x,u16 y)
 127          {
 128   1        u16 color;
 129   1        u8 r=0,g=0,b=0;
 130   1      
 131   1      //    Lcd_WR_Reg(0x0020);     //设置读颜色坐标
 132   1      //  Lcd_Write_Data(x);    
 133   1      //    Lcd_WR_Reg(0x0021);
 134   1      //  Lcd_Write_Data(y); 
 135   1      
 136   1        Lcd_WR_Reg(0X2A); 
 137   1        Lcd_Write_Data(x>>8); 
 138   1        Lcd_Write_Data(x&0XFF);  
 139   1        Lcd_Write_Data(x>>8); 
 140   1        Lcd_Write_Data(x&0XFF); 
 141   1      
 142   1        Lcd_WR_Reg(0X2B); 
 143   1        Lcd_Write_Data(y>>8); 
 144   1          Lcd_Write_Data(y&0XFF);
 145   1        Lcd_Write_Data(y>>8); 
 146   1          Lcd_Write_Data(y&0XFF);
 147   1      
 148   1      
 149   1        Lcd_WR_Reg(0x2e);              //发送读颜色命令
 150   1      
 151   1        P7M1=0XFF;              //P7 P0口设置为仅输入状态 等待接收颜色数据
 152   1        P7M0=0X00;
 153   1        P0M1=0XFF;
 154   1        P0M0=0X00;
 155   1      
 156   1        LCD_RS=1;             //1为读数据
 157   1        //读取数据(读GRAM时,需要读2次)
 158   1        LCD_RD=0;               //进行读数据
 159   1        LCD_RD=1;
 160   1        //dummy READ            //第一次接收为虚拟数据  手册69页 有详解
 161   1        delay_us(6);
 162   1        LCD_RD=0;            
 163   1        LCD_RD=1;
 164   1        r=P0;
 165   1        g=P7;
 166   1        delay_us(6);
 167   1        LCD_RD=0;            
 168   1        LCD_RD=1;
 169   1        b=P0;
 170   1          
 171   1      //  color=P2;
 172   1      //  color=(color<<8)|P0;            //第二次读取接收颜色数据
 173   1      
 174   1          P7M1=0X00;              //P7 P0配置为双向IO口  （恢复状态）
 175   1        P7M0=0X00;
 176   1        P0M1=0X00;
 177   1        P0M0=0X00;
 178   1      
C51 COMPILER V9.60.0.0   TFT                                                               06/02/2021 14:33:53 PAGE 4   

 179   1        color=(((u16)r>>3)<<11)|(((u16)g>>2)<<5)|((u16)b>>3);
 180   1        return color;
 181   1      //  return LCD_bgr2rgb(color);      //对读取的颜色进行 BGR转RGB   
 182   1      }
 183          
 184          
 185          
 186          /*
 187          9341扫描特点 如果扫描方向改变后 会直接改变x y起始原点
 188          所以在横屏显示的时候 就不用考虑 x y的变化后的结果 因为原点也发生改变
 189          就是可以一种代码通用
 190          
 191          */
 192          
 193          //tft屏设置扫描方式函数
 194          //mode 1 -8  一共8种扫描方式
 195          //     1   左>右  上>下 
 196          //     2   左>右  下>上
 197          //     3   右>左  上>下
 198          //     4   右>左  下>上 
 199          //     5   上>下  左>右  
 200          //     6   上>下  右>左 
 201          //     7   下>上  左>右 
 202          //     8   下>上  右>左 
 203          void LCD_scan(u8 mode)
 204          {
 205   1       switch(mode)
 206   1       {
 207   2         case 1:
 208   2        Lcd_WR_Reg(0x36);    // Memory Access Control      saomiao
 209   2        Lcd_Write_Data(0x08);   
 210   2          Lcd_WR_Reg(0X2C);      //开始写入GRAM      
 211   2        break;
 212   2         case 2:
 213   2        Lcd_WR_Reg(0x36);    // Memory Access Control      saomiao
 214   2        Lcd_Write_Data(0x88); 
 215   2        Lcd_WR_Reg(0X2C);      //开始写入GRAM          
 216   2        break;
 217   2         case 3:
 218   2        Lcd_WR_Reg(0x36);    // Memory Access Control      saomiao
 219   2        Lcd_Write_Data(0x48);   
 220   2        Lcd_WR_Reg(0X2C);      //开始写入GRAM       
 221   2        break;
 222   2         case 4:
 223   2        Lcd_WR_Reg(0x36);    // Memory Access Control      saomiao
 224   2        Lcd_Write_Data(0xc8);   
 225   2        Lcd_WR_Reg(0X2C);      //开始写入GRAM        
 226   2        break;
 227   2         case 5:
 228   2        Lcd_WR_Reg(0x36);    // Memory Access Control      saomiao
 229   2        Lcd_Write_Data(0x28); 
 230   2        Lcd_WR_Reg(0X2C);      //开始写入GRAM          
 231   2        break;
 232   2         case 6:
 233   2        Lcd_WR_Reg(0x36);    // Memory Access Control      saomiao
 234   2        Lcd_Write_Data(0x68);   
 235   2        Lcd_WR_Reg(0X2C);      //开始写入GRAM        
 236   2        break;
 237   2         case 7:
 238   2        Lcd_WR_Reg(0x36);    // Memory Access Control      saomiao
 239   2        Lcd_Write_Data(0xa8);   
 240   2        Lcd_WR_Reg(0X2C);      //开始写入GRAM        
C51 COMPILER V9.60.0.0   TFT                                                               06/02/2021 14:33:53 PAGE 5   

 241   2        break;
 242   2         case 8:
 243   2        Lcd_WR_Reg(0x36);    // Memory Access Control      saomiao
 244   2        Lcd_Write_Data(0xe8); 
 245   2        Lcd_WR_Reg(0X2C);      //开始写入GRAM          
 246   2        break;
 247   2       }
 248   1      }
 249          
 250          
 251          
 252          
 253          //液晶初始化 ili9341
 254          void Lcd_Init(void)
 255          {
 256   1        LCD_RST=1;
 257   1          delay_ms(5);  
 258   1          LCD_RST=0;
 259   1          delay_ms(5) ;
 260   1          LCD_RST=1;
 261   1      
 262   1        LCD_CS=1;
 263   1        LCD_RD=1;
 264   1        LCD_WR=1;
 265   1        delay_ms(5);
 266   1      
 267   1        LCD_CS =0;  //打开片选使能    从这一步开始 始终开启屏片选使能 
 268   1        
 269   1          Lcd_WR_Reg(0xCF);  
 270   1          Lcd_Write_Data(0x00); 
 271   1          Lcd_Write_Data(0xC1); 
 272   1          Lcd_Write_Data(0X30); 
 273   1          Lcd_WR_Reg(0xED);  
 274   1          Lcd_Write_Data(0x64); 
 275   1          Lcd_Write_Data(0x03); 
 276   1          Lcd_Write_Data(0X12); 
 277   1          Lcd_Write_Data(0X81); 
 278   1          Lcd_WR_Reg(0xE8);  
 279   1          Lcd_Write_Data(0x85); 
 280   1          Lcd_Write_Data(0x10); 
 281   1          Lcd_Write_Data(0x7A); 
 282   1          Lcd_WR_Reg(0xCB);  
 283   1          Lcd_Write_Data(0x39); 
 284   1          Lcd_Write_Data(0x2C); 
 285   1          Lcd_Write_Data(0x00); 
 286   1          Lcd_Write_Data(0x34); 
 287   1          Lcd_Write_Data(0x02); 
 288   1          Lcd_WR_Reg(0xF7);  
 289   1          Lcd_Write_Data(0x20); 
 290   1          Lcd_WR_Reg(0xEA);  
 291   1          Lcd_Write_Data(0x00); 
 292   1          Lcd_Write_Data(0x00); 
 293   1          Lcd_WR_Reg(0xC0);    //Power control 
 294   1          Lcd_Write_Data(0x1B);   //VRH[5:0] 
 295   1          Lcd_WR_Reg(0xC1);    //Power control 
 296   1          Lcd_Write_Data(0x01);   //SAP[2:0];BT[3:0] 
 297   1          Lcd_WR_Reg(0xC5);    //VCM control 
 298   1          Lcd_Write_Data(0x30);    //3F
 299   1          Lcd_Write_Data(0x30);    //3C
 300   1          Lcd_WR_Reg(0xC7);    //VCM control2 
 301   1          Lcd_Write_Data(0XB7); 
 302   1          Lcd_WR_Reg(0x36);    // Memory Access Control 
C51 COMPILER V9.60.0.0   TFT                                                               06/02/2021 14:33:53 PAGE 6   

 303   1          Lcd_Write_Data(0x08); 
 304   1          Lcd_WR_Reg(0x3A);   
 305   1          Lcd_Write_Data(0x55); 
 306   1          Lcd_WR_Reg(0xB1);   
 307   1          Lcd_Write_Data(0x00);   
 308   1          Lcd_Write_Data(0x1A); 
 309   1          Lcd_WR_Reg(0xB6);    // Display Function Control 
 310   1          Lcd_Write_Data(0x0A); 
 311   1          Lcd_Write_Data(0xA2); 
 312   1          Lcd_WR_Reg(0xF2);    // 3Gamma Function Disable 
 313   1          Lcd_Write_Data(0x00); 
 314   1          Lcd_WR_Reg(0x26);    //Gamma curve selected 
 315   1          Lcd_Write_Data(0x01); 
 316   1          Lcd_WR_Reg(0xE0);    //Set Gamma 
 317   1          Lcd_Write_Data(0x0F); 
 318   1          Lcd_Write_Data(0x2A); 
 319   1          Lcd_Write_Data(0x28); 
 320   1          Lcd_Write_Data(0x08); 
 321   1          Lcd_Write_Data(0x0E); 
 322   1          Lcd_Write_Data(0x08); 
 323   1          Lcd_Write_Data(0x54); 
 324   1          Lcd_Write_Data(0XA9); 
 325   1          Lcd_Write_Data(0x43); 
 326   1          Lcd_Write_Data(0x0A); 
 327   1          Lcd_Write_Data(0x0F); 
 328   1          Lcd_Write_Data(0x00); 
 329   1          Lcd_Write_Data(0x00); 
 330   1          Lcd_Write_Data(0x00); 
 331   1          Lcd_Write_Data(0x00);      
 332   1          Lcd_WR_Reg(0XE1);    //Set Gamma 
 333   1          Lcd_Write_Data(0x00); 
 334   1          Lcd_Write_Data(0x15); 
 335   1          Lcd_Write_Data(0x17); 
 336   1          Lcd_Write_Data(0x07); 
 337   1          Lcd_Write_Data(0x11); 
 338   1          Lcd_Write_Data(0x06); 
 339   1          Lcd_Write_Data(0x2B); 
 340   1          Lcd_Write_Data(0x56); 
 341   1          Lcd_Write_Data(0x3C); 
 342   1          Lcd_Write_Data(0x05); 
 343   1          Lcd_Write_Data(0x10); 
 344   1          Lcd_Write_Data(0x0F); 
 345   1          Lcd_Write_Data(0x3F); 
 346   1          Lcd_Write_Data(0x3F); 
 347   1          Lcd_Write_Data(0x0F); 
 348   1          Lcd_WR_Reg(0x2B); 
 349   1          Lcd_Write_Data(0x00);
 350   1          Lcd_Write_Data(0x00);
 351   1          Lcd_Write_Data(0x01);
 352   1          Lcd_Write_Data(0x3f);
 353   1          Lcd_WR_Reg(0x2A); 
 354   1          Lcd_Write_Data(0x00);
 355   1          Lcd_Write_Data(0x00);
 356   1          Lcd_Write_Data(0x00);
 357   1          Lcd_Write_Data(0xef);  
 358   1          Lcd_WR_Reg(0x11); //Exit Sleep
 359   1          delay_ms(120);
 360   1          Lcd_WR_Reg(0x29); //display on  
 361   1      
 362   1      }    
 363          
 364          
C51 COMPILER V9.60.0.0   TFT                                                               06/02/2021 14:33:53 PAGE 7   

 365          
 366          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    899    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----      12
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
